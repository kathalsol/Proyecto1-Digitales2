/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* top =  1  *)
(* src = "word32_8bits_e.v:1" *)
module word32_8bits_e(clk_4f_c, valid_in, Data_in, valid_out_e, Data_out_e);
  (* src = "word32_8bits_e.v:10" *)
  wire [7:0] _000_;
  (* src = "word32_8bits_e.v:10" *)
  wire [1:0] _001_;
  (* src = "word32_8bits_e.v:10" *)
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  (* src = "word32_8bits_e.v:4" *)
  input [31:0] Data_in;
  (* src = "word32_8bits_e.v:6" *)
  output [7:0] Data_out_e;
  (* src = "word32_8bits_e.v:2" *)
  input clk_4f_c;
  (* src = "word32_8bits_e.v:8" *)
  wire [1:0] contador;
  (* src = "word32_8bits_e.v:3" *)
  input valid_in;
  (* src = "word32_8bits_e.v:5" *)
  output valid_out_e;
  NOT _068_ (
    .A(contador[0]),
    .Y(_030_)
  );
  NOT _069_ (
    .A(contador[1]),
    .Y(_031_)
  );
  NOT _070_ (
    .A(valid_in),
    .Y(_032_)
  );
  NOR _071_ (
    .A(contador[0]),
    .B(_032_),
    .Y(_001_[0])
  );
  NOR _072_ (
    .A(_030_),
    .B(_031_),
    .Y(_033_)
  );
  NOR _073_ (
    .A(contador[0]),
    .B(contador[1]),
    .Y(_034_)
  );
  NOT _074_ (
    .A(_034_),
    .Y(_035_)
  );
  NAND _075_ (
    .A(valid_in),
    .B(_035_),
    .Y(_036_)
  );
  NOR _076_ (
    .A(_033_),
    .B(_036_),
    .Y(_001_[1])
  );
  NOR _077_ (
    .A(contador[0]),
    .B(_031_),
    .Y(_037_)
  );
  NAND _078_ (
    .A(Data_in[8]),
    .B(_037_),
    .Y(_038_)
  );
  NOR _079_ (
    .A(_030_),
    .B(contador[1]),
    .Y(_039_)
  );
  NAND _080_ (
    .A(Data_in[16]),
    .B(_039_),
    .Y(_040_)
  );
  NAND _081_ (
    .A(_038_),
    .B(_040_),
    .Y(_041_)
  );
  NAND _082_ (
    .A(Data_in[0]),
    .B(_033_),
    .Y(_042_)
  );
  NAND _083_ (
    .A(Data_in[24]),
    .B(_034_),
    .Y(_043_)
  );
  NAND _084_ (
    .A(_042_),
    .B(_043_),
    .Y(_044_)
  );
  NOR _085_ (
    .A(_041_),
    .B(_044_),
    .Y(_045_)
  );
  NOR _086_ (
    .A(_032_),
    .B(_045_),
    .Y(_000_[0])
  );
  NAND _087_ (
    .A(Data_in[9]),
    .B(_037_),
    .Y(_046_)
  );
  NAND _088_ (
    .A(Data_in[17]),
    .B(_039_),
    .Y(_047_)
  );
  NAND _089_ (
    .A(_046_),
    .B(_047_),
    .Y(_048_)
  );
  NAND _090_ (
    .A(Data_in[1]),
    .B(_033_),
    .Y(_049_)
  );
  NAND _091_ (
    .A(Data_in[25]),
    .B(_034_),
    .Y(_050_)
  );
  NAND _092_ (
    .A(_049_),
    .B(_050_),
    .Y(_051_)
  );
  NOR _093_ (
    .A(_048_),
    .B(_051_),
    .Y(_052_)
  );
  NOR _094_ (
    .A(_032_),
    .B(_052_),
    .Y(_000_[1])
  );
  NAND _095_ (
    .A(Data_in[10]),
    .B(_037_),
    .Y(_053_)
  );
  NAND _096_ (
    .A(Data_in[18]),
    .B(_039_),
    .Y(_054_)
  );
  NAND _097_ (
    .A(_053_),
    .B(_054_),
    .Y(_055_)
  );
  NAND _098_ (
    .A(Data_in[2]),
    .B(_033_),
    .Y(_056_)
  );
  NAND _099_ (
    .A(Data_in[26]),
    .B(_034_),
    .Y(_057_)
  );
  NAND _100_ (
    .A(_056_),
    .B(_057_),
    .Y(_058_)
  );
  NOR _101_ (
    .A(_055_),
    .B(_058_),
    .Y(_059_)
  );
  NOR _102_ (
    .A(_032_),
    .B(_059_),
    .Y(_000_[2])
  );
  NAND _103_ (
    .A(Data_in[11]),
    .B(_037_),
    .Y(_060_)
  );
  NAND _104_ (
    .A(Data_in[19]),
    .B(_039_),
    .Y(_061_)
  );
  NAND _105_ (
    .A(_060_),
    .B(_061_),
    .Y(_062_)
  );
  NAND _106_ (
    .A(Data_in[3]),
    .B(_033_),
    .Y(_063_)
  );
  NAND _107_ (
    .A(Data_in[27]),
    .B(_034_),
    .Y(_064_)
  );
  NAND _108_ (
    .A(_063_),
    .B(_064_),
    .Y(_065_)
  );
  NOR _109_ (
    .A(_062_),
    .B(_065_),
    .Y(_066_)
  );
  NOR _110_ (
    .A(_032_),
    .B(_066_),
    .Y(_000_[3])
  );
  NAND _111_ (
    .A(Data_in[12]),
    .B(_037_),
    .Y(_067_)
  );
  NAND _112_ (
    .A(Data_in[20]),
    .B(_039_),
    .Y(_003_)
  );
  NAND _113_ (
    .A(_067_),
    .B(_003_),
    .Y(_004_)
  );
  NAND _114_ (
    .A(Data_in[4]),
    .B(_033_),
    .Y(_005_)
  );
  NAND _115_ (
    .A(Data_in[28]),
    .B(_034_),
    .Y(_006_)
  );
  NAND _116_ (
    .A(_005_),
    .B(_006_),
    .Y(_007_)
  );
  NOR _117_ (
    .A(_004_),
    .B(_007_),
    .Y(_008_)
  );
  NOR _118_ (
    .A(_032_),
    .B(_008_),
    .Y(_000_[4])
  );
  NAND _119_ (
    .A(Data_in[13]),
    .B(_037_),
    .Y(_009_)
  );
  NAND _120_ (
    .A(Data_in[21]),
    .B(_039_),
    .Y(_010_)
  );
  NAND _121_ (
    .A(_009_),
    .B(_010_),
    .Y(_011_)
  );
  NAND _122_ (
    .A(Data_in[5]),
    .B(_033_),
    .Y(_012_)
  );
  NAND _123_ (
    .A(Data_in[29]),
    .B(_034_),
    .Y(_013_)
  );
  NAND _124_ (
    .A(_012_),
    .B(_013_),
    .Y(_014_)
  );
  NOR _125_ (
    .A(_011_),
    .B(_014_),
    .Y(_015_)
  );
  NOR _126_ (
    .A(_032_),
    .B(_015_),
    .Y(_000_[5])
  );
  NAND _127_ (
    .A(Data_in[14]),
    .B(_037_),
    .Y(_016_)
  );
  NAND _128_ (
    .A(Data_in[22]),
    .B(_039_),
    .Y(_017_)
  );
  NAND _129_ (
    .A(_016_),
    .B(_017_),
    .Y(_018_)
  );
  NAND _130_ (
    .A(Data_in[6]),
    .B(_033_),
    .Y(_019_)
  );
  NAND _131_ (
    .A(Data_in[30]),
    .B(_034_),
    .Y(_020_)
  );
  NAND _132_ (
    .A(_019_),
    .B(_020_),
    .Y(_021_)
  );
  NOR _133_ (
    .A(_018_),
    .B(_021_),
    .Y(_022_)
  );
  NOR _134_ (
    .A(_032_),
    .B(_022_),
    .Y(_000_[6])
  );
  NAND _135_ (
    .A(Data_in[15]),
    .B(_037_),
    .Y(_023_)
  );
  NAND _136_ (
    .A(Data_in[23]),
    .B(_039_),
    .Y(_024_)
  );
  NAND _137_ (
    .A(_023_),
    .B(_024_),
    .Y(_025_)
  );
  NAND _138_ (
    .A(Data_in[7]),
    .B(_033_),
    .Y(_026_)
  );
  NAND _139_ (
    .A(Data_in[31]),
    .B(_034_),
    .Y(_027_)
  );
  NAND _140_ (
    .A(_026_),
    .B(_027_),
    .Y(_028_)
  );
  NOR _141_ (
    .A(_025_),
    .B(_028_),
    .Y(_029_)
  );
  NOR _142_ (
    .A(_032_),
    .B(_029_),
    .Y(_000_[7])
  );
  BUF _143_ (
    .A(valid_in),
    .Y(_002_)
  );
  (* src = "word32_8bits_e.v:10" *)
  DFF _144_ (
    .C(clk_4f_c),
    .D(_000_[0]),
    .Q(Data_out_e[0])
  );
  (* src = "word32_8bits_e.v:10" *)
  DFF _145_ (
    .C(clk_4f_c),
    .D(_000_[1]),
    .Q(Data_out_e[1])
  );
  (* src = "word32_8bits_e.v:10" *)
  DFF _146_ (
    .C(clk_4f_c),
    .D(_000_[2]),
    .Q(Data_out_e[2])
  );
  (* src = "word32_8bits_e.v:10" *)
  DFF _147_ (
    .C(clk_4f_c),
    .D(_000_[3]),
    .Q(Data_out_e[3])
  );
  (* src = "word32_8bits_e.v:10" *)
  DFF _148_ (
    .C(clk_4f_c),
    .D(_000_[4]),
    .Q(Data_out_e[4])
  );
  (* src = "word32_8bits_e.v:10" *)
  DFF _149_ (
    .C(clk_4f_c),
    .D(_000_[5]),
    .Q(Data_out_e[5])
  );
  (* src = "word32_8bits_e.v:10" *)
  DFF _150_ (
    .C(clk_4f_c),
    .D(_000_[6]),
    .Q(Data_out_e[6])
  );
  (* src = "word32_8bits_e.v:10" *)
  DFF _151_ (
    .C(clk_4f_c),
    .D(_000_[7]),
    .Q(Data_out_e[7])
  );
  (* src = "word32_8bits_e.v:10" *)
  DFF _152_ (
    .C(clk_4f_c),
    .D(_001_[0]),
    .Q(contador[0])
  );
  (* src = "word32_8bits_e.v:10" *)
  DFF _153_ (
    .C(clk_4f_c),
    .D(_001_[1]),
    .Q(contador[1])
  );
  (* src = "word32_8bits_e.v:10" *)
  DFF _154_ (
    .C(clk_4f_c),
    .D(_002_),
    .Q(valid_out_e)
  );
endmodule
