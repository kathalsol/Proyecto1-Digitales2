/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* src = "byte_striping_e.v:1" *)
module byte_striping_e(clk_2f_e, reset, valid_in, Data_in, valid_0_c, lane_0_c, valid_1_c, lane_1_c);
  (* src = "byte_striping_e.v:13" *)
  reg _00_;
  (* src = "byte_striping_e.v:13" *)
  reg [31:0] _01_;
  (* src = "byte_striping_e.v:13" *)
  reg [31:0] _02_;
  (* src = "byte_striping_e.v:13" *)
  reg _03_;
  (* src = "byte_striping_e.v:13" *)
  reg _04_;
  (* src = "byte_striping_e.v:23" *)
  reg _05_;
  (* src = "byte_striping_e.v:23" *)
  reg [31:0] _06_;
  (* src = "byte_striping_e.v:23" *)
  reg [31:0] _07_;
  (* src = "byte_striping_e.v:23" *)
  reg _08_;
  (* src = "byte_striping_e.v:23" *)
  reg _09_;
  (* src = "byte_striping_e.v:14" *)
  wire _10_;
  (* src = "byte_striping_e.v:43" *)
  wire _11_;
  (* src = "byte_striping_e.v:5" *)
  input [31:0] Data_in;
  (* src = "byte_striping_e.v:2" *)
  input clk_2f_e;
  (* src = "byte_striping_e.v:11" *)
  reg contador;
  (* src = "byte_striping_e.v:7" *)
  output [31:0] lane_0_c;
  reg [31:0] lane_0_c;
  (* src = "byte_striping_e.v:9" *)
  output [31:0] lane_1_c;
  reg [31:0] lane_1_c;
  (* src = "byte_striping_e.v:3" *)
  input reset;
  (* src = "byte_striping_e.v:6" *)
  output valid_0_c;
  reg valid_0_c;
  (* src = "byte_striping_e.v:8" *)
  output valid_1_c;
  reg valid_1_c;
  (* src = "byte_striping_e.v:4" *)
  input valid_in;
  assign _10_ = ~(* src = "byte_striping_e.v:14" *) reset;
  assign _11_ = ~(* src = "byte_striping_e.v:43" *) valid_0_c;
  always @* begin
    _04_ = valid_1_c;
    _02_ = lane_1_c;
    _00_ = contador;
    _03_ = valid_0_c;
    _01_ = lane_0_c;
    (* src = "byte_striping_e.v:14" *)
    casez (_10_)
      /* src = "byte_striping_e.v:14" */
      1'h1:
        begin
          _03_ = 1'h0;
          _01_ = 32'd0;
          _04_ = 1'h0;
          _02_ = 32'd0;
          _00_ = 1'h0;
        end
      default:
          /* empty */;
    endcase
  end
  always @* begin
      valid_1_c <= _04_;
      lane_1_c <= _02_;
      contador <= _00_;
      valid_0_c <= _03_;
      lane_0_c <= _01_;
  end
  always @* begin
    _09_ = valid_1_c;
    _07_ = lane_1_c;
    _05_ = contador;
    _08_ = valid_0_c;
    _06_ = lane_0_c;
    (* src = "byte_striping_e.v:24" *)
    casez (valid_in)
      /* src = "byte_striping_e.v:24" */
      1'h1:
          (* src = "byte_striping_e.v:25" *)
          casez (contador)
            /* src = "byte_striping_e.v:26" */
            1'h0:
              begin
                _05_ = 1'h1;
                _06_ = Data_in;
                _08_ = 1'h1;
              end
            /* src = "byte_striping_e.v:32" */
            1'h1:
              begin
                _05_ = 1'h0;
                _07_ = Data_in;
                _09_ = 1'h1;
              end
            default:
                /* empty */;
          endcase
      /* src = "byte_striping_e.v:40" */
      default:
        begin
          _08_ = 1'h0;
          _06_ = 32'd0;
          (* src = "byte_striping_e.v:43" *)
          casez (_11_)
            /* src = "byte_striping_e.v:43" */
            1'h1:
              begin
                _07_ = 32'd0;
                _09_ = 1'h0;
              end
            default:
                /* empty */;
          endcase
        end
    endcase
  end
  always @(posedge clk_2f_e) begin
      valid_1_c <= _09_;
      lane_1_c <= _07_;
      contador <= _05_;
      valid_0_c <= _08_;
      lane_0_c <= _06_;
  end
endmodule

(* src = "parallel_serial_e.v:1" *)
module parallel_serial_e(clk_32f, reset, valid_in, Data_in, Data_out_c);
  (* src = "parallel_serial_e.v:11" *)
  reg _0_;
  (* src = "parallel_serial_e.v:11" *)
  reg [2:0] _1_;
  (* src = "parallel_serial_e.v:11" *)
  reg [7:0] _2_;
  (* src = "parallel_serial_e.v:19" *)
  reg _3_;
  (* src = "parallel_serial_e.v:19" *)
  reg [2:0] _4_;
  (* src = "parallel_serial_e.v:19" *)
  reg [7:0] _5_;
  (* src = "parallel_serial_e.v:12" *)
  wire _6_;
  (* src = "parallel_serial_e.v:5" *)
  input [7:0] Data_in;
  (* src = "parallel_serial_e.v:6" *)
  output Data_out_c;
  reg Data_out_c;
  (* src = "parallel_serial_e.v:2" *)
  input clk_32f;
  (* src = "parallel_serial_e.v:9" *)
  reg [2:0] contador;
  (* src = "parallel_serial_e.v:8" *)
  reg [7:0] data2send;
  (* src = "parallel_serial_e.v:3" *)
  input reset;
  (* src = "parallel_serial_e.v:4" *)
  input valid_in;
  assign _6_ = ~(* src = "parallel_serial_e.v:12" *) reset;
  always @* begin
    _1_ = contador;
    _0_ = Data_out_c;
    _2_ = data2send;
    (* src = "parallel_serial_e.v:12" *)
    casez (_6_)
      /* src = "parallel_serial_e.v:12" */
      1'h1:
        begin
          _0_ = 1'h0;
          _2_ = 8'hbc;
          _1_ = 3'h0;
        end
      default:
          /* empty */;
    endcase
  end
  always @* begin
      contador <= _1_;
      Data_out_c <= _0_;
      data2send <= _2_;
  end
  always @* begin
    _4_ = contador;
    _3_ = Data_out_c;
    _5_ = data2send;
    (* src = "parallel_serial_e.v:20" *)
    casez (contador)
      /* src = "parallel_serial_e.v:21" */
      3'h0:
        begin
          _3_ = data2send[7];
          _4_ = 3'h1;
        end
      /* src = "parallel_serial_e.v:26" */
      3'h1:
        begin
          _3_ = data2send[6];
          _4_ = 3'h2;
        end
      /* src = "parallel_serial_e.v:31" */
      3'h2:
        begin
          _3_ = data2send[5];
          _4_ = 3'h3;
        end
      /* src = "parallel_serial_e.v:36" */
      3'h3:
        begin
          _3_ = data2send[4];
          _4_ = 3'h4;
        end
      /* src = "parallel_serial_e.v:41" */
      3'h4:
        begin
          _3_ = data2send[3];
          _4_ = 3'h5;
        end
      /* src = "parallel_serial_e.v:46" */
      3'h5:
        begin
          _3_ = data2send[2];
          _4_ = 3'h6;
        end
      /* src = "parallel_serial_e.v:51" */
      3'h6:
        begin
          _3_ = data2send[1];
          _4_ = 3'h7;
        end
      /* src = "parallel_serial_e.v:56" */
      3'h7:
        begin
          _3_ = data2send[0];
          _4_ = 3'h0;
          (* src = "parallel_serial_e.v:60" *)
          casez (valid_in)
            /* src = "parallel_serial_e.v:60" */
            1'h1:
                _5_ = Data_in;
            /* src = "parallel_serial_e.v:61" */
            default:
                _5_ = 8'hbc;
          endcase
        end
      default:
          /* empty */;
    endcase
  end
  always @(posedge clk_32f) begin
      contador <= _4_;
      Data_out_c <= _3_;
      data2send <= _5_;
  end
endmodule

(* top =  1  *)
(* src = "phy_tx_e.v:5" *)
module phy_tx_e(clk_32f, clk_2f_e, clk_4f_e, reset, valid_in, Data_in, Data_out_1bit_0_e, Data_out_1bit_1_e);
  (* src = "phy_tx_e.v:30" *)
  reg _0_;
  (* src = "phy_tx_e.v:30" *)
  reg _1_;
  (* src = "phy_tx_e.v:11" *)
  input [31:0] Data_in;
  (* src = "phy_tx_e.v:24" *)
  wire [7:0] Data_out_0_c;
  (* src = "phy_tx_e.v:26" *)
  wire [7:0] Data_out_1_c;
  (* src = "phy_tx_e.v:12" *)
  output Data_out_1bit_0_e;
  reg Data_out_1bit_0_e;
  (* src = "phy_tx_e.v:13" *)
  output Data_out_1bit_1_e;
  reg Data_out_1bit_1_e;
  (* src = "phy_tx_e.v:27" *)
  wire Out_0_c;
  (* src = "phy_tx_e.v:28" *)
  wire Out_1_c;
  (* src = "phy_tx_e.v:7" *)
  input clk_2f_e;
  (* src = "phy_tx_e.v:6" *)
  input clk_32f;
  (* src = "phy_tx_e.v:8" *)
  input clk_4f_e;
  (* src = "phy_tx_e.v:20" *)
  wire [31:0] lane_0_c;
  (* src = "phy_tx_e.v:22" *)
  wire [31:0] lane_1_c;
  (* src = "phy_tx_e.v:9" *)
  input reset;
  (* src = "phy_tx_e.v:19" *)
  wire valid_0_c;
  (* src = "phy_tx_e.v:21" *)
  wire valid_1_c;
  (* src = "phy_tx_e.v:10" *)
  input valid_in;
  (* src = "phy_tx_e.v:23" *)
  wire valid_out_0_c;
  (* src = "phy_tx_e.v:25" *)
  wire valid_out_1_c;
  (* module_not_derived = 32'd1 *)
  (* src = "phy_tx_e.v:35" *)
  byte_striping_e byte_striping_1 (
    .Data_in(Data_in),
    .clk_2f_e(clk_2f_e),
    .lane_0_c(lane_0_c),
    .lane_1_c(lane_1_c),
    .reset(reset),
    .valid_0_c(valid_0_c),
    .valid_1_c(valid_1_c),
    .valid_in(valid_in)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_tx_e.v:70" *)
  parallel_serial_e parallel_serial_e1 (
    .Data_in(Data_out_0_c),
    .Data_out_c(Out_0_c),
    .clk_32f(clk_32f),
    .reset(reset),
    .valid_in(valid_out_0_c)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_tx_e.v:80" *)
  parallel_serial_e parallel_serial_e2 (
    .Data_in(Data_out_1_c),
    .Data_out_c(Out_1_c),
    .clk_32f(clk_32f),
    .reset(reset),
    .valid_in(valid_out_1_c)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_tx_e.v:48" *)
  word32_8bits_e word32_8bits_1 (
    .Data_in(lane_0_c),
    .Data_out_c(Data_out_0_c),
    .clk_4f_e(clk_4f_e),
    .reset(reset),
    .valid_in(valid_0_c),
    .valid_out_c(valid_out_0_c)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_tx_e.v:59" *)
  word32_8bits_e word32_8bits_2 (
    .Data_in(lane_1_c),
    .Data_out_c(Data_out_1_c),
    .clk_4f_e(clk_4f_e),
    .reset(reset),
    .valid_in(valid_1_c),
    .valid_out_c(valid_out_1_c)
  );
  always @* begin
    _0_ = Out_0_c;
    _1_ = Out_1_c;
  end
  always @* begin
      Data_out_1bit_0_e <= _0_;
      Data_out_1bit_1_e <= _1_;
  end
endmodule

(* src = "word32_8bits_e.v:1" *)
module word32_8bits_e(clk_4f_e, reset, valid_in, Data_in, valid_out_c, Data_out_c);
  (* src = "word32_8bits_e.v:11" *)
  reg [7:0] _0_;
  (* src = "word32_8bits_e.v:11" *)
  reg [1:0] _1_;
  (* src = "word32_8bits_e.v:11" *)
  reg _2_;
  (* src = "word32_8bits_e.v:19" *)
  reg [7:0] _3_;
  (* src = "word32_8bits_e.v:19" *)
  reg [1:0] _4_;
  (* src = "word32_8bits_e.v:19" *)
  reg _5_;
  (* src = "word32_8bits_e.v:12" *)
  wire _6_;
  (* src = "word32_8bits_e.v:5" *)
  input [31:0] Data_in;
  (* src = "word32_8bits_e.v:7" *)
  output [7:0] Data_out_c;
  reg [7:0] Data_out_c;
  (* src = "word32_8bits_e.v:2" *)
  input clk_4f_e;
  (* src = "word32_8bits_e.v:9" *)
  reg [1:0] contador;
  (* src = "word32_8bits_e.v:3" *)
  input reset;
  (* src = "word32_8bits_e.v:4" *)
  input valid_in;
  (* src = "word32_8bits_e.v:6" *)
  output valid_out_c;
  reg valid_out_c;
  assign _6_ = ~(* src = "word32_8bits_e.v:12" *) reset;
  always @* begin
    _1_ = contador;
    _2_ = valid_out_c;
    _0_ = Data_out_c;
    (* src = "word32_8bits_e.v:12" *)
    casez (_6_)
      /* src = "word32_8bits_e.v:12" */
      1'h1:
        begin
          _1_ = 2'h0;
          _2_ = 1'h0;
          _0_ = 8'h00;
        end
      default:
          /* empty */;
    endcase
  end
  always @* begin
      contador <= _1_;
      valid_out_c <= _2_;
      Data_out_c <= _0_;
  end
  always @* begin
    _4_ = contador;
    _5_ = valid_out_c;
    _3_ = Data_out_c;
    (* src = "word32_8bits_e.v:20" *)
    casez (valid_in)
      /* src = "word32_8bits_e.v:20" */
      1'h1:
          (* src = "word32_8bits_e.v:21" *)
          casez (contador)
            /* src = "word32_8bits_e.v:22" */
            2'h0:
              begin
                _3_ = Data_in[31:24];
                _4_ = 2'h1;
                _5_ = 1'h1;
              end
            /* src = "word32_8bits_e.v:28" */
            2'h1:
              begin
                _3_ = Data_in[23:16];
                _4_ = 2'h2;
                _5_ = 1'h1;
              end
            /* src = "word32_8bits_e.v:34" */
            2'h2:
              begin
                _3_ = Data_in[15:8];
                _4_ = 2'h3;
                _5_ = 1'h1;
              end
            /* src = "word32_8bits_e.v:40" */
            2'h3:
              begin
                _3_ = Data_in[7:0];
                _4_ = 2'h0;
                _5_ = 1'h1;
              end
            default:
                /* empty */;
          endcase
      /* src = "word32_8bits_e.v:48" */
      default:
        begin
          _4_ = 2'h0;
          _5_ = 1'h0;
          _3_ = 8'h00;
        end
    endcase
  end
  always @(posedge clk_4f_e) begin
      contador <= _4_;
      valid_out_c <= _5_;
      Data_out_c <= _3_;
  end
endmodule
