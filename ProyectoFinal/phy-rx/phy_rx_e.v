/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* src = "bits8_32word_e.v:1" *)
module bits8_32word_e(clk_4f_e, reset, valid_in, Data_in, valid_out_e, Data_out_e);
  (* src = "bits8_32word_e.v:14" *)
  reg [31:0] _00_;
  (* src = "bits8_32word_e.v:14" *)
  reg [1:0] _01_;
  (* src = "bits8_32word_e.v:14" *)
  reg _02_;
  (* src = "bits8_32word_e.v:14" *)
  reg [31:0] _03_;
  (* src = "bits8_32word_e.v:14" *)
  reg _04_;
  (* src = "bits8_32word_e.v:14" *)
  reg _05_;
  (* src = "bits8_32word_e.v:25" *)
  reg [31:0] _06_;
  (* src = "bits8_32word_e.v:25" *)
  reg [1:0] _07_;
  (* src = "bits8_32word_e.v:25" *)
  reg _08_;
  (* src = "bits8_32word_e.v:25" *)
  reg [31:0] _09_;
  (* src = "bits8_32word_e.v:25" *)
  reg _10_;
  (* src = "bits8_32word_e.v:25" *)
  reg _11_;
  (* src = "bits8_32word_e.v:15" *)
  wire _12_;
  (* src = "bits8_32word_e.v:5" *)
  input [7:0] Data_in;
  (* src = "bits8_32word_e.v:7" *)
  output [31:0] Data_out_e;
  reg [31:0] Data_out_e;
  (* src = "bits8_32word_e.v:2" *)
  input clk_4f_e;
  (* src = "bits8_32word_e.v:9" *)
  reg [1:0] contador;
  (* src = "bits8_32word_e.v:12" *)
  reg down;
  (* src = "bits8_32word_e.v:10" *)
  reg [31:0] memoria;
  (* src = "bits8_32word_e.v:3" *)
  input reset;
  (* src = "bits8_32word_e.v:11" *)
  reg valid;
  (* src = "bits8_32word_e.v:4" *)
  input valid_in;
  (* src = "bits8_32word_e.v:6" *)
  output valid_out_e;
  reg valid_out_e;
  assign _12_ = ~(* src = "bits8_32word_e.v:15" *) reset;
  always @* begin
    _05_ = valid_out_e;
    _00_ = Data_out_e;
    _01_ = contador;
    _04_ = valid;
    _02_ = down;
    _03_ = memoria;
    (* src = "bits8_32word_e.v:15" *)
    casez (_12_)
      /* src = "bits8_32word_e.v:15" */
      1'h1:
        begin
          _05_ = 1'h0;
          _00_ = 32'd0;
          _01_ = 2'h3;
          _03_ = 32'd0;
          _04_ = 1'h0;
          _02_ = 1'h0;
        end
      default:
          /* empty */;
    endcase
  end
  always @* begin
      valid_out_e <= _05_;
      Data_out_e <= _00_;
      contador <= _01_;
      valid <= _04_;
      down <= _02_;
      memoria <= _03_;
  end
  always @* begin
    _11_ = valid_out_e;
    _06_ = Data_out_e;
    _07_ = contador;
    _10_ = valid;
    _08_ = down;
    _09_ = memoria;
    (* src = "bits8_32word_e.v:26" *)
    casez (valid_in)
      /* src = "bits8_32word_e.v:26" */
      1'h1:
          (* src = "bits8_32word_e.v:27" *)
          casez (contador)
            /* src = "bits8_32word_e.v:28" */
            2'h0:
              begin
                _11_ = valid;
                _06_ = memoria;
                _09_ = { Data_in, 24'h000000 };
                _07_ = 2'h1;
              end
            /* src = "bits8_32word_e.v:35" */
            2'h1:
              begin
                _09_ = { memoria[31:24], Data_in, 16'h0000 };
                _07_ = 2'h2;
              end
            /* src = "bits8_32word_e.v:40" */
            2'h2:
              begin
                _09_ = { memoria[31:16], Data_in, 8'h00 };
                _07_ = 2'h3;
              end
            /* src = "bits8_32word_e.v:45" */
            2'h3:
              begin
                _09_ = { memoria[31:8], Data_in };
                _10_ = 1'h1;
                _07_ = 2'h0;
                _08_ = 1'h0;
              end
            default:
                /* empty */;
          endcase
      /* src = "bits8_32word_e.v:54" */
      default:
          (* src = "bits8_32word_e.v:55" *)
          casez (contador)
            /* src = "bits8_32word_e.v:56" */
            2'h0:
              begin
                _11_ = valid;
                _06_ = memoria;
                (* src = "bits8_32word_e.v:60" *)
                casez (down)
                  /* src = "bits8_32word_e.v:60" */
                  1'h1:
                      _07_ = 2'h0;
                  /* src = "bits8_32word_e.v:61" */
                  default:
                      _07_ = 2'h1;
                endcase
              end
            /* src = "bits8_32word_e.v:63" */
            2'h1:
                _07_ = 2'h2;
            /* src = "bits8_32word_e.v:64" */
            2'h2:
                _07_ = 2'h3;
            /* src = "bits8_32word_e.v:65" */
            2'h3:
              begin
                _09_ = 32'd0;
                _10_ = 1'h0;
                _07_ = 2'h0;
                _08_ = 1'h1;
              end
            default:
                /* empty */;
          endcase
    endcase
  end
  always @(posedge clk_4f_e) begin
      valid_out_e <= _11_;
      Data_out_e <= _06_;
      contador <= _07_;
      valid <= _10_;
      down <= _08_;
      memoria <= _09_;
  end
endmodule

(* src = "byte_un_striping_e.v:1" *)
module byte_un_striping_e(clk_2f_e, reset, valid_0, lane_0, valid_1, lane_1, valid_out_e, Data_out_e);
  (* src = "byte_un_striping_e.v:13" *)
  reg [31:0] _0_;
  (* src = "byte_un_striping_e.v:13" *)
  reg _1_;
  (* src = "byte_un_striping_e.v:13" *)
  reg _2_;
  (* src = "byte_un_striping_e.v:21" *)
  reg [31:0] _3_;
  (* src = "byte_un_striping_e.v:21" *)
  reg _4_;
  (* src = "byte_un_striping_e.v:21" *)
  reg _5_;
  (* src = "byte_un_striping_e.v:14" *)
  wire _6_;
  (* src = "byte_un_striping_e.v:9" *)
  output [31:0] Data_out_e;
  reg [31:0] Data_out_e;
  (* src = "byte_un_striping_e.v:2" *)
  input clk_2f_e;
  (* src = "byte_un_striping_e.v:11" *)
  reg contador;
  (* src = "byte_un_striping_e.v:5" *)
  input [31:0] lane_0;
  (* src = "byte_un_striping_e.v:7" *)
  input [31:0] lane_1;
  (* src = "byte_un_striping_e.v:3" *)
  input reset;
  (* src = "byte_un_striping_e.v:4" *)
  input valid_0;
  (* src = "byte_un_striping_e.v:6" *)
  input valid_1;
  (* src = "byte_un_striping_e.v:8" *)
  output valid_out_e;
  reg valid_out_e;
  assign _6_ = ~(* src = "byte_un_striping_e.v:14" *) reset;
  always @* begin
    _2_ = valid_out_e;
    _0_ = Data_out_e;
    _1_ = contador;
    (* src = "byte_un_striping_e.v:14" *)
    casez (_6_)
      /* src = "byte_un_striping_e.v:14" */
      1'h1:
        begin
          _2_ = 1'h0;
          _0_ = 32'd0;
          _1_ = 1'h1;
        end
      default:
          /* empty */;
    endcase
  end
  always @* begin
      valid_out_e <= _2_;
      Data_out_e <= _0_;
      contador <= _1_;
  end
  always @* begin
    _5_ = valid_out_e;
    _3_ = Data_out_e;
    _4_ = contador;
    (* src = "byte_un_striping_e.v:22" *)
    casez (contador)
      /* src = "byte_un_striping_e.v:23" */
      1'h0:
          (* src = "byte_un_striping_e.v:25" *)
          casez (valid_0)
            /* src = "byte_un_striping_e.v:25" */
            1'h1:
              begin
                _4_ = 1'h1;
                _5_ = 1'h1;
                _3_ = lane_0;
              end
            /* src = "byte_un_striping_e.v:30" */
            default:
              begin
                _4_ = 1'h1;
                _5_ = 1'h0;
                _3_ = 32'd0;
              end
          endcase
      /* src = "byte_un_striping_e.v:36" */
      1'h1:
          (* src = "byte_un_striping_e.v:38" *)
          casez (valid_1)
            /* src = "byte_un_striping_e.v:38" */
            1'h1:
              begin
                _4_ = 1'h0;
                _5_ = 1'h1;
                _3_ = lane_1;
              end
            /* src = "byte_un_striping_e.v:43" */
            default:
              begin
                _4_ = 1'h0;
                _5_ = 1'h0;
                _3_ = 32'd0;
              end
          endcase
      default:
          /* empty */;
    endcase
  end
  always @(posedge clk_2f_e) begin
      valid_out_e <= _5_;
      Data_out_e <= _3_;
      contador <= _4_;
  end
endmodule

(* top =  1  *)
(* src = "phy_rx_e.v:5" *)
module phy_rx_e(clk_32f, clk_2f_e, clk_4f_e, reset, Data_in_0, Data_in_1, valid_out_e, Data_out_e);
  (* src = "phy_rx_e.v:30" *)
  reg [31:0] _0_;
  (* src = "phy_rx_e.v:30" *)
  reg _1_;
  (* src = "phy_rx_e.v:28" *)
  wire [31:0] Data_c;
  (* src = "phy_rx_e.v:10" *)
  input Data_in_0;
  (* src = "phy_rx_e.v:11" *)
  input Data_in_1;
  (* src = "phy_rx_e.v:24" *)
  wire [7:0] Data_out_0_c;
  (* src = "phy_rx_e.v:26" *)
  wire [7:0] Data_out_1_c;
  (* src = "phy_rx_e.v:13" *)
  output [31:0] Data_out_e;
  reg [31:0] Data_out_e;
  (* src = "phy_rx_e.v:7" *)
  input clk_2f_e;
  (* src = "phy_rx_e.v:6" *)
  input clk_32f;
  (* src = "phy_rx_e.v:8" *)
  input clk_4f_e;
  (* src = "phy_rx_e.v:20" *)
  wire [31:0] lane_0_c;
  (* src = "phy_rx_e.v:22" *)
  wire [31:0] lane_1_c;
  (* src = "phy_rx_e.v:9" *)
  input reset;
  (* src = "phy_rx_e.v:19" *)
  wire valid_0_c;
  (* src = "phy_rx_e.v:21" *)
  wire valid_1_c;
  (* src = "phy_rx_e.v:27" *)
  wire valid_c;
  (* src = "phy_rx_e.v:23" *)
  wire valid_out_0_c;
  (* src = "phy_rx_e.v:25" *)
  wire valid_out_1_c;
  (* src = "phy_rx_e.v:12" *)
  output valid_out_e;
  reg valid_out_e;
  (* module_not_derived = 32'd1 *)
  (* src = "phy_rx_e.v:53" *)
  bits8_32word_e bits8_32word_1 (
    .Data_in(Data_out_0_c),
    .Data_out_e(lane_0_c),
    .clk_4f_e(clk_4f_e),
    .reset(reset),
    .valid_in(valid_out_0_c),
    .valid_out_e(valid_0_c)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_rx_e.v:63" *)
  bits8_32word_e bits8_32word_2 (
    .Data_in(Data_out_1_c),
    .Data_out_e(lane_1_c),
    .clk_4f_e(clk_4f_e),
    .reset(reset),
    .valid_in(valid_out_1_c),
    .valid_out_e(valid_1_c)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_rx_e.v:73" *)
  byte_un_striping_e byte_un_striping_1 (
    .Data_out_e(Data_c),
    .clk_2f_e(clk_2f_e),
    .lane_0(lane_0_c),
    .lane_1(lane_1_c),
    .reset(reset),
    .valid_0(valid_0_c),
    .valid_1(valid_1_c),
    .valid_out_e(valid_c)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_rx_e.v:35" *)
  serial_parallel_e serial_parallel_1 (
    .Data_in(Data_in_0),
    .Data_out_e(Data_out_0_c),
    .clk_32f(clk_32f),
    .reset(reset),
    .valid_out_e(valid_out_0_c)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_rx_e.v:44" *)
  serial_parallel_e serial_parallel_2 (
    .Data_in(Data_in_1),
    .Data_out_e(Data_out_1_c),
    .clk_32f(clk_32f),
    .reset(reset),
    .valid_out_e(valid_out_1_c)
  );
  always @* begin
    _1_ = valid_c;
    _0_ = Data_c;
  end
  always @* begin
      valid_out_e <= _1_;
      Data_out_e <= _0_;
  end
endmodule

(* src = "serial_parallel_e.v:1" *)
module serial_parallel_e(clk_32f, reset, Data_in, valid_out_e, Data_out_e);
  (* src = "serial_parallel_e.v:13" *)
  reg [1:0] _00_;
  (* src = "serial_parallel_e.v:13" *)
  reg [7:0] _01_;
  (* src = "serial_parallel_e.v:13" *)
  reg _02_;
  (* src = "serial_parallel_e.v:13" *)
  reg [2:0] _03_;
  (* src = "serial_parallel_e.v:13" *)
  reg [7:0] _04_;
  (* src = "serial_parallel_e.v:13" *)
  reg _05_;
  (* src = "serial_parallel_e.v:24" *)
  reg [1:0] _06_;
  (* src = "serial_parallel_e.v:24" *)
  reg [7:0] _07_;
  (* src = "serial_parallel_e.v:24" *)
  reg _08_;
  (* src = "serial_parallel_e.v:24" *)
  reg [2:0] _09_;
  (* src = "serial_parallel_e.v:24" *)
  reg [7:0] _10_;
  (* src = "serial_parallel_e.v:24" *)
  reg _11_;
  wire [3:0] _12_;
  wire [1:0] _13_;
  wire _14_;
  wire [7:0] _15_;
  wire _16_;
  (* src = "serial_parallel_e.v:14" *)
  wire _17_;
  (* src = "serial_parallel_e.v:29" *)
  wire _18_;
  (* src = "serial_parallel_e.v:81" *)
  wire _19_;
  (* src = "serial_parallel_e.v:10" *)
  reg [1:0] BC_count;
  (* src = "serial_parallel_e.v:4" *)
  input Data_in;
  (* src = "serial_parallel_e.v:6" *)
  output [7:0] Data_out_e;
  reg [7:0] Data_out_e;
  (* src = "serial_parallel_e.v:11" *)
  reg active;
  (* src = "serial_parallel_e.v:2" *)
  input clk_32f;
  (* src = "serial_parallel_e.v:9" *)
  reg [2:0] contador;
  (* src = "serial_parallel_e.v:8" *)
  reg [7:0] memoria;
  (* src = "serial_parallel_e.v:3" *)
  input reset;
  (* src = "serial_parallel_e.v:5" *)
  output valid_out_e;
  reg valid_out_e;
  assign _12_[0] = _15_[0] |(* src = "serial_parallel_e.v:81" *)  _15_[1];
  assign _12_[1] = _15_[2] |(* src = "serial_parallel_e.v:81" *)  _15_[3];
  assign _12_[2] = _15_[4] |(* src = "serial_parallel_e.v:81" *)  _15_[5];
  assign _12_[3] = _15_[6] |(* src = "serial_parallel_e.v:81" *)  _15_[7];
  assign _13_[0] = _12_[0] |(* src = "serial_parallel_e.v:81" *)  _12_[1];
  assign _13_[1] = _12_[2] |(* src = "serial_parallel_e.v:81" *)  _12_[3];
  assign _16_ = _13_[0] |(* src = "serial_parallel_e.v:81" *)  _13_[1];
  assign _19_ = ~(* src = "serial_parallel_e.v:81" *) _16_;
  assign _17_ = ~(* src = "serial_parallel_e.v:14" *) reset;
  assign _15_[2] = memoria[2] ^(* src = "serial_parallel_e.v:81" *)  1'h1;
  assign _15_[3] = memoria[3] ^(* src = "serial_parallel_e.v:81" *)  1'h1;
  assign _15_[4] = memoria[4] ^(* src = "serial_parallel_e.v:81" *)  1'h1;
  assign _15_[5] = memoria[5] ^(* src = "serial_parallel_e.v:81" *)  1'h1;
  assign _15_[7] = memoria[7] ^(* src = "serial_parallel_e.v:81" *)  1'h1;
  always @* begin
    _05_ = valid_out_e;
    _01_ = Data_out_e;
    _03_ = contador;
    _04_ = memoria;
    _00_ = BC_count;
    _02_ = active;
    (* src = "serial_parallel_e.v:14" *)
    casez (_17_)
      /* src = "serial_parallel_e.v:14" */
      1'h1:
        begin
          _05_ = 1'h0;
          _01_ = 8'h00;
          _04_ = 8'h00;
          _03_ = 3'h7;
          _00_ = 2'h0;
          _02_ = 1'h0;
        end
      default:
          /* empty */;
    endcase
  end
  always @* begin
      valid_out_e <= _05_;
      Data_out_e <= _01_;
      contador <= _03_;
      memoria <= _04_;
      BC_count <= _00_;
      active <= _02_;
  end
  always @* begin
    _11_ = valid_out_e;
    _07_ = Data_out_e;
    _09_ = contador;
    _10_ = memoria;
    _06_ = BC_count;
    _08_ = active;
    (* src = "serial_parallel_e.v:25" *)
    casez (active)
      /* src = "serial_parallel_e.v:25" */
      1'h1:
          (* src = "serial_parallel_e.v:26" *)
          casez (contador)
            /* src = "serial_parallel_e.v:27" */
            3'h0:
              begin
                _09_ = 3'h1;
                _10_ = { Data_in, 7'h00 };
                (* src = "serial_parallel_e.v:29" *)
                casez (_18_)
                  /* src = "serial_parallel_e.v:29" */
                  1'h1:
                    begin
                      _11_ = 1'h0;
                      _07_ = 8'h00;
                    end
                  /* src = "serial_parallel_e.v:33" */
                  default:
                    begin
                      _11_ = 1'h1;
                      _07_ = memoria;
                    end
                endcase
              end
            /* src = "serial_parallel_e.v:40" */
            3'h1:
              begin
                _09_ = 3'h2;
                _10_ = { memoria[7], Data_in, 6'h00 };
              end
            /* src = "serial_parallel_e.v:45" */
            3'h2:
              begin
                _09_ = 3'h3;
                _10_ = { memoria[7:6], Data_in, 5'h00 };
              end
            /* src = "serial_parallel_e.v:50" */
            3'h3:
              begin
                _09_ = 3'h4;
                _10_ = { memoria[7:5], Data_in, 4'h0 };
              end
            /* src = "serial_parallel_e.v:55" */
            3'h4:
              begin
                _09_ = 3'h5;
                _10_ = { memoria[7:4], Data_in, 3'h0 };
              end
            /* src = "serial_parallel_e.v:60" */
            3'h5:
              begin
                _09_ = 3'h6;
                _10_ = { memoria[7:3], Data_in, 2'h0 };
              end
            /* src = "serial_parallel_e.v:65" */
            3'h6:
              begin
                _09_ = 3'h7;
                _10_ = { memoria[7:2], Data_in, 1'h0 };
              end
            /* src = "serial_parallel_e.v:70" */
            3'h7:
              begin
                _09_ = 3'h0;
                _10_ = { memoria[7:1], Data_in };
              end
            default:
                /* empty */;
          endcase
      /* src = "serial_parallel_e.v:77" */
      default:
          (* src = "serial_parallel_e.v:78" *)
          casez (contador)
            /* src = "serial_parallel_e.v:79" */
            3'h0:
              begin
                _09_ = 3'h1;
                _10_ = { Data_in, 7'h00 };
                (* src = "serial_parallel_e.v:81" *)
                casez (_19_)
                  /* src = "serial_parallel_e.v:81" */
                  1'h1:
                      (* src = "serial_parallel_e.v:82" *)
                      casez (BC_count)
                        /* src = "serial_parallel_e.v:83" */
                        2'h0:
                            _06_ = 2'h1;
                        /* src = "serial_parallel_e.v:84" */
                        2'h1:
                            _06_ = 2'h2;
                        /* src = "serial_parallel_e.v:85" */
                        2'h2:
                            _06_ = 2'h3;
                        /* src = "serial_parallel_e.v:86" */
                        2'h3:
                            _08_ = 1'h1;
                        default:
                            /* empty */;
                      endcase
                  default:
                      /* empty */;
                endcase
              end
            /* src = "serial_parallel_e.v:92" */
            3'h1:
              begin
                _09_ = 3'h2;
                _10_ = { memoria[7], Data_in, 6'h00 };
              end
            /* src = "serial_parallel_e.v:97" */
            3'h2:
              begin
                _09_ = 3'h3;
                _10_ = { memoria[7:6], Data_in, 5'h00 };
              end
            /* src = "serial_parallel_e.v:102" */
            3'h3:
              begin
                _09_ = 3'h4;
                _10_ = { memoria[7:5], Data_in, 4'h0 };
              end
            /* src = "serial_parallel_e.v:107" */
            3'h4:
              begin
                _09_ = 3'h5;
                _10_ = { memoria[7:4], Data_in, 3'h0 };
              end
            /* src = "serial_parallel_e.v:112" */
            3'h5:
              begin
                _09_ = 3'h6;
                _10_ = { memoria[7:3], Data_in, 2'h0 };
              end
            /* src = "serial_parallel_e.v:117" */
            3'h6:
              begin
                _09_ = 3'h7;
                _10_ = { memoria[7:2], Data_in, 1'h0 };
              end
            /* src = "serial_parallel_e.v:122" */
            3'h7:
              begin
                _09_ = 3'h0;
                _10_ = { memoria[7:1], Data_in };
              end
            default:
                /* empty */;
          endcase
    endcase
  end
  always @(posedge clk_32f) begin
      valid_out_e <= _11_;
      Data_out_e <= _07_;
      contador <= _09_;
      memoria <= _10_;
      BC_count <= _06_;
      active <= _08_;
  end
  assign _18_ = _19_;
  assign _15_[0] = memoria[0];
  assign _15_[1] = memoria[1];
  assign _15_[6] = memoria[6];
endmodule
