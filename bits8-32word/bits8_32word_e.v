/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* top =  1  *)
(* src = "bits8_32word_e.v:1" *)
module bits8_32word_e(clk_4f_e, reset, valid_in, Data_in, valid_out_e, Data_out_e);
  (* src = "bits8_32word_e.v:13" *)
  reg [31:0] _00_;
  (* src = "bits8_32word_e.v:13" *)
  reg [1:0] _01_;
  (* src = "bits8_32word_e.v:13" *)
  reg [31:0] _02_;
  (* src = "bits8_32word_e.v:13" *)
  reg _03_;
  (* src = "bits8_32word_e.v:13" *)
  reg _04_;
  (* src = "bits8_32word_e.v:23" *)
  reg [31:0] _05_;
  (* src = "bits8_32word_e.v:23" *)
  reg [1:0] _06_;
  (* src = "bits8_32word_e.v:23" *)
  reg [31:0] _07_;
  (* src = "bits8_32word_e.v:23" *)
  reg _08_;
  (* src = "bits8_32word_e.v:23" *)
  reg _09_;
  (* src = "bits8_32word_e.v:14" *)
  wire _10_;
  (* src = "bits8_32word_e.v:5" *)
  input [7:0] Data_in;
  (* src = "bits8_32word_e.v:7" *)
  output [31:0] Data_out_e;
  reg [31:0] Data_out_e;
  (* src = "bits8_32word_e.v:2" *)
  input clk_4f_e;
  (* src = "bits8_32word_e.v:9" *)
  reg [1:0] contador;
  (* src = "bits8_32word_e.v:10" *)
  reg [31:0] memoria;
  (* src = "bits8_32word_e.v:3" *)
  input reset;
  (* src = "bits8_32word_e.v:11" *)
  reg valid;
  (* src = "bits8_32word_e.v:4" *)
  input valid_in;
  (* src = "bits8_32word_e.v:6" *)
  output valid_out_e;
  reg valid_out_e;
  assign _10_ = ~(* src = "bits8_32word_e.v:14" *) reset;
  always @* begin
    _01_ = contador;
    _02_ = memoria;
    _03_ = valid;
    _04_ = valid_out_e;
    _00_ = Data_out_e;
    (* src = "bits8_32word_e.v:14" *)
    casez (_10_)
      /* src = "bits8_32word_e.v:14" */
      1'h1:
        begin
          _04_ = 1'h0;
          _00_ = 32'd0;
          _01_ = 2'h3;
          _02_ = 32'd0;
          _03_ = 1'h0;
        end
      default:
          /* empty */;
    endcase
  end
  always @* begin
      contador <= _01_;
      memoria <= _02_;
      valid <= _03_;
      valid_out_e <= _04_;
      Data_out_e <= _00_;
  end
  always @* begin
    _06_ = contador;
    _07_ = memoria;
    _08_ = valid;
    _09_ = valid_out_e;
    _05_ = Data_out_e;
    (* src = "bits8_32word_e.v:24" *)
    casez (valid_in)
      /* src = "bits8_32word_e.v:24" */
      1'h1:
          (* src = "bits8_32word_e.v:25" *)
          casez (contador)
            /* src = "bits8_32word_e.v:26" */
            2'h0:
              begin
                _09_ = valid;
                _05_ = memoria;
                _07_ = { Data_in, 24'h000000 };
                _06_ = 2'h1;
              end
            /* src = "bits8_32word_e.v:33" */
            2'h1:
              begin
                _07_ = { memoria[31:24], Data_in, 16'h0000 };
                _06_ = 2'h2;
              end
            /* src = "bits8_32word_e.v:38" */
            2'h2:
              begin
                _07_ = { memoria[31:16], Data_in, 8'h00 };
                _06_ = 2'h3;
              end
            /* src = "bits8_32word_e.v:43" */
            2'h3:
              begin
                _07_ = { memoria[31:8], Data_in };
                _08_ = 1'h1;
                _06_ = 2'h0;
              end
            default:
                /* empty */;
          endcase
      /* src = "bits8_32word_e.v:51" */
      default:
          (* src = "bits8_32word_e.v:52" *)
          casez (contador)
            /* src = "bits8_32word_e.v:53" */
            2'h0:
              begin
                _09_ = valid;
                _05_ = memoria;
                _06_ = 2'h1;
              end
            /* src = "bits8_32word_e.v:59" */
            2'h1:
                _06_ = 2'h2;
            /* src = "bits8_32word_e.v:60" */
            2'h2:
                _06_ = 2'h3;
            /* src = "bits8_32word_e.v:61" */
            2'h3:
              begin
                _07_ = 32'd0;
                _08_ = 1'h0;
                _06_ = 2'h0;
              end
            default:
                /* empty */;
          endcase
    endcase
  end
  always @(posedge clk_4f_e) begin
      contador <= _06_;
      memoria <= _07_;
      valid <= _08_;
      valid_out_e <= _09_;
      Data_out_e <= _05_;
  end
endmodule
